#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

int n;
const int maxi = 11;
const int inf = 98765432;
int matrix[maxi][maxi];//인접행렬
bool selected[maxi];//레드 팀 선택
bool visit[maxi];//방문여부
int people[maxi];//인구수
int ans = inf;
 
//입력
void input(){
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>people[i];
    }
    for(int i=1;i<=n;i++){
        int a,b;
        cin>>a;
        for(int j=0;j<a;j++){
            cin>>b;
            matrix[i][b] = 1;//인접행렬 양방향
            matrix[b][i] = 1;
        }
    }
    memset(selected,false,sizeof(selected));//초기화
}
 
//연결여부
bool bfs(vector<int> v,bool tf){
    memset(visit,false,sizeof(visit));//초기화
    //첫 원소 넣기
    int cnt = 1;
    queue<int> q;
    q.push(v[0]);
    visit[v[0]] = true;
    
    while(!q.empty()){
        int x = q.front();
        q.pop();
        
        //다음지점
        for(int i=1;i<=n;i++){
            if(matrix[x][i]==1 && visit[i]==false && selected[i]==tf){
                visit[i] = true;
                cnt++;
                q.push(i);
            }
        }
    }
    if(cnt==v.size()){
        return true;
    }
    return false;
}

//연결확인
bool is_connect(){
    vector<int> red_team;
    vector<int> blue_team;
    //각 팀 나누기
    for(int i=1;i<=n;i++){
        if(selected[i]==true){
            red_team.push_back(i);
        }else{
            blue_team.push_back(i);
        }
    }
    //인원수 확인
    if(red_team.size()==0 || blue_team.size()==0){
        return false;
    }
    //각 팀은 연결되었는가?
    if(bfs(red_team,true)==false){
        return false;
    }
    if(bfs(blue_team,false)==false){
        return false;
    }
    return true;
}

//최솟값구하기
int diff(){
    int red = 0;int blue = 0;
    for(int i=1;i<=n;i++){
        if(selected[i]==true){
            red+=people[i];
        }else{
            blue+=people[i];
        }
    }
    int res = abs(red-blue);
    return res;
}

//조합선택
void dfs(int idx,int cnt){//인덱스, 인원수
    //연결이 되어있는가?
    if(cnt>=1){
        if(is_connect()){
            ans = min(ans,diff());//최솟값 구하기
        }
    }
    //다음조합
    for(int i=idx;i<=n;i++){
        //미방문이면
        if(selected[i]==false){
            selected[i] = true;
            dfs(i+1,cnt+1);
            selected[i] = false;//체크 해제
        }
    }
}
int main(){
    input();//입력
    dfs(1,0);//조합선택
    //출력
    if(ans==inf){
        cout<<-1;
    }else{
        cout<<ans;
    }
    return 0;
}
