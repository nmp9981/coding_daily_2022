#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

int n,m;
const int maxi = 1001;
int maps[maxi][maxi];
int visit[maxi][maxi][2];//최단거리, 벽을 부수는가?
//축이동
int dx[4] = {-1,1,0,0};
int dy[4] = {0,0,-1,1};

//입력
void input(){
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            scanf("%1d",&maps[i][j]);
        }
    }
    memset(visit,-1,sizeof(visit));//초기화
}

//탐색
void bfs(){
    //초기좌표
    queue<pair<pair<int,int>,int>> q;
    q.push({{1,1},1});
    visit[1][1][1] = 1;//방문체크 및 최단거리
    
    while(!q.empty()){
        int x = q.front().first.first;
        int y = q.front().first.second;
        int z = q.front().second;
        q.pop();
        
        //도착
        if(x==n && y==m){
            cout<<visit[x][y][z];
            return;
        }
        //다음지점
        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            //범위내에 드는가?
            if(nx<=0 || nx>n || ny<=0 || ny>m){
                continue;
            }
            //벽이 없다.
            if(visit[nx][ny][z]==-1 && maps[nx][ny]==0){
                visit[nx][ny][z] = visit[x][y][z]+1;
                q.push({{nx,ny},z});
            }
            //벽을 부순다.
            if(visit[nx][ny][z-1]==-1 && maps[nx][ny]==1 && z==1){
                visit[nx][ny][z-1] = visit[x][y][z]+1;
                q.push({{nx,ny},z-1});
            }
        }
    }
    cout<<-1;//불가능
}
int main(){
    input();//입력
    bfs();//탐색
    return 0;
}
