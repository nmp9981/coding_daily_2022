#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

int n,m,t;
const int maxi = 10001;
int parent[maxi];
vector<pair<int,pair<int,int>>> city;

//입력
void input(){
    cin>>n>>m>>t;
    //부모노드 초기화
    for(int i=1;i<=n;i++){
        parent[i] = i;
    }
    //간선 정보 입력
    for(int i=0;i<m;i++){
        int a,b,c;
        cin>>a>>b>>c;
        city.push_back({c,{a,b}});
    }
    //벡터 정렬
    sort(city.begin(),city.end());//거리기준 정렬
}

//각 노드의 부모노드 찾기
int find(int h){
    if(parent[h]==h){//루트노드이면
        return h;
    }
    parent[h] = find(parent[h]);
    return parent[h];
}

//부모노드 합치기
void uni(int px,int py){
    if(px<py){
        parent[py] = px;
    }else{
        parent[px] = py;
    }
}

//크루스칼 알고리즘
void kruskal(){
    int node = 0;
    int total = 0;
    for(int i=0;i<city.size();i++){
        int x = city[i].second.first;
        int y = city[i].second.second;
        int cost = city[i].first;
        
        //사이클을 이루고 있지 않다면 부모노드 연결
        int px = find(x);
        int py = find(y);
        if(px!=py){
            node++;
            total+=cost;
            uni(px,py);
        }
        
        //노드 완성
        if(node==n-1){
            int add = (n-2)*(n-1)*t/2;
            printf("%d",total+add);
            return;
        }
    }
}
int main(){
    input();//입력
    kruskal();//크루스칼
    return 0;
}
