#include <iostream>
#include <cstring>
#include <algorithm>
#include <stack>
#include <set>
using namespace std;

stack<int> s;//삭제된것
set<int> table;//현재 남아있는것
set<int>::iterator cs;

string solution(int n, int k, vector<string> cmd) {
    string answer(n,'X');//초기화
    //페이지를 모두 담기
    for(int i=0;i<n;i++){
        table.insert(i);
    }
    cs = table.find(k);//현재 커서 위치
    
    //명령어 탐색
    for(string i:cmd){
        if(i[0]=='C'){//삭제
            s.push(*cs);//삭제된것 추가
            cs = table.erase(cs);
            if(cs==table.end()){//마지막행 삭제
                cs--;
            }
        }else if(i[0]=='Z'){//복구
            table.insert(s.top());
            s.pop();
        }else{//커서 이동
            int d = stoi(i.substr(2,i.size()));
            if(i[0]=='U'){//위로 이동
                while(d--){
                    cs--;
                }
            }else if(i[0]=='D'){//아래로 이동
                while(d--){
                    cs++;
                }
            }
        }
    }
    //삭제되지 않은 행만
    for(int i:table){
        answer[i]='O';
    }
    return answer;
}
