#include <iostream>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;

int n,m;
const int maxi = 8;//지도 크기
int maps_ori[maxi][maxi];//지도 원본
int maps[maxi][maxi];//지도
bool visit[maxi][maxi];//방문 체크
int res = 0;//결과
//축이동
int dx[4] = {-1,1,0,0};
int dy[4] = {0,0,-1,1};

//입력
void input(){
    cin>>n>>m;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin>>maps_ori[i][j];
        }
    }
}

//초기화
void init(){
    memset(visit,false,sizeof(visit));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            maps[i][j] = maps_ori[i][j];
        }
    }
}

//안전지대의 개수
int bfs(){
    init();//초기화
    //초기 바이러스 지점 모두 큐에 넣기
    queue<pair<int,int>> q;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(maps[i][j]==2){
                q.push({i,j});
                visit[i][j] = true;
            }
        }
    }
    
    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        
        //다음지점
        for(int k=0;k<4;k++){
            int nx = x + dx[k];
            int ny = y + dy[k];
            //범위내에 드는가?
            if(nx<0 || nx>=n || ny<0 || ny>=m){
                continue;
            }
            //미방문이고 빈공간인가?
            if(visit[nx][ny]==false && maps[nx][ny]==0){
                maps[nx][ny] = 2;
                q.push({nx,ny});
            }
        }
    }
    //안전 지대 개수
    int safe = 0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(maps[i][j]==0){
                safe++;
            }
        }
    }
    return safe;
}

//벽세우기
void dfs(int cnt){
    //벽을 모두 세웠으면
    if(cnt==3){
        res = max(res,bfs());//안전지대의 수 갱신
        return;
    }
    //다음 지점
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(maps_ori[i][j]==0){
                maps_ori[i][j] = 1;//벽 세우기
                dfs(cnt+1);
                maps_ori[i][j] = 0;//벽 해제
            }
        }
    }
}

int main(){
    input();//입력
    dfs(0);//벽세우기
    cout<<res;
    return 0;
}
