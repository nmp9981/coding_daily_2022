#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

int res = 0;
string world[5];
bool visit[5][5];//방문 여부
bool selected[25];//선택 여부
//축이동
int dx[4] = {-1,1,0,0};
int dy[4] = {0,0,-1,1};

//입력
void input(){
    for(int i=0;i<5;i++) cin>>world[i];
}

//이다솜파인가?
bool is_som(){
    int som = 0;//솜파
    for(int i=0;i<25;i++){
        if(selected[i]==true){
            if(world[i/5][i%5]=='S') som++;
        }
        if(som>=4) return true;//솜파 확정
    }
    return false;
}
//연결되었는가?
bool bfs(){
    queue<pair<int,int>> q;
    memset(visit,false,sizeof(visit));//초기화
    int length = 1;
    //첫 선택지점 구하기
    for(int i=0;i<25;i++){
        if(selected[i]==true){
            q.push({i/5,i%5});
            visit[i/5][i%5] = true;//방문체크
            break;
        }
    }
    
    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        
        //다음지점
        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            //범위내에 드는가?
            if(nx<0 || nx>=5 || ny<0 || ny>=5) continue;
            //미방문인 선택지점
            if(visit[nx][ny]==false && selected[5*nx+ny]==true){
                visit[nx][ny] = true;
                q.push({nx,ny});
                length++;
            }
        }
    }
    if(length==7) return true;
    return false;
}
//조합구하기
void dfs(int cnt,int idx){
    if(cnt==7){
        if(is_som()){//이다솜파
            if(bfs()){//연결
                res++;
            }
        }
        return;
    }
    //선택
    for(int i=idx;i<25;i++){
        if(selected[i]==false){
            selected[i] = true;
            dfs(cnt+1,i+1);//재귀
            selected[i] = false;
        }
    }
}
int main(){
    input();//입력
    dfs(0,0);//조합
    cout<<res;
    return 0;
}
