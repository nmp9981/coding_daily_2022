#include <iostream>
#include <vector>
#include <cstring>
#include <queue>
using namespace std;

int n;
const int maxi = 11;
const int inf = 98765432;
bool matrix[maxi][maxi];//인접행렬
bool selected[maxi];//선택
bool visit[maxi];//방문여부
int people[maxi];//인구수
int ans = inf;

//입력
void input(){
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>people[i];
    }
    //그래프 입력
    for(int i=1;i<=n;i++){
        int a,b;
        cin>>a;
        for(int j=1;j<=a;j++){
            cin>>b;
            matrix[i][b] = true;//인접행렬, 양방향 그래프
            matrix[b][i] = true;
        }
    }
}

//각 팀은 연결되어 있는가?
bool bfs(vector<int> v,bool tf){
    memset(visit,false,sizeof(visit));
    queue<int> q;
    q.push(v[0]);//첫 원소 넣기
    visit[v[0]] = true;
    int cnt = 1;
    
    while(!q.empty()){
        int x = q.front();
        q.pop();
        
        //다음지점
        for(int i=1;i<=n;i++){
            //연결되어 있고 미방문이고 팀이 일치
            if(matrix[x][i]==true && visit[i]==false && selected[i]==tf){
                visit[i] = true;//방문체크
                cnt++;
                q.push(i);
            }
        }
    }
    //팀 인원이 맞으면
    if(cnt==v.size()){
        return true;
    }
    return false;
}

//연결 되어있는가?
bool is_connect(){
    vector<int> red;//레드팀
    vector<int> blue;//블루팀
    //팀 넣기
    for(int i=1;i<=n;i++){
        if(selected[i]==true){
            red.push_back(i);
        }else{
            blue.push_back(i);
        }
    }
    
    //최소 1개는 있는가?
    if(red.size()==0 || blue.size()==0){
        return false;
    }
    //각 팀이 연결이 되어 있는가?
    if(bfs(red,true)==false){
        return false;
    }
    if(bfs(blue,false)==false){
        return false;
    }
    return true;
}

//인구수의 차이 구하기
int diff(){
    int red_mem = 0;int blue_mem = 0;
    for(int i=1;i<=n;i++){
        if(selected[i]==true){
            red_mem+=people[i];
        }else{
            blue_mem+=people[i];
        }
    }
    int diff = abs(red_mem-blue_mem);
    return diff;
}

//조합구하기
void dfs(int idx,int cnt){
    if(cnt>=1){
        if(is_connect()){
            ans = min(ans,diff());
        }
    }
    //다음 숫자
    for(int i=idx;i<=n;i++){
        selected[i] = true;//레드팀 선택
        dfs(i+1,cnt+1);
        selected[i] = false;
    }
}

int main(){
    input();//입력
    dfs(1,0);//조합구하기
    //출력
    if(ans==inf){
        cout<<-1;
    }else{
        cout<<ans;
    }
    return 0;
}
