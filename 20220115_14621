#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int n,m,px,py;
const int maxi = 1001;
char school[maxi];
int parent[maxi];
vector<pair<int,pair<int,int>>> graph;

//입력
void input(){
    cin>>n>>m;
    //각 노드의 부모노드 초기화
    for(int i=1;i<=n;i++){
        parent[i] = i;
    }
    //학교입력
    for(int i=1;i<=n;i++){
        cin>>school[i];
    }
    //그래프 입력
    for(int i=0;i<m;i++){
        int u,v,d;
        cin>>u>>v>>d;
        //이성간만 그래프에 넣기
        if(school[u]!=school[v]){
            graph.push_back({d,{u,v}});//거리, 간선
        }
    }
    sort(graph.begin(),graph.end());//거리 기준으로 정렬
}

//각 노드의 부모노드 찾기
int find(int h){
    if(parent[h] == h){
        return h;
    }
    parent[h] = find(parent[h]);
    return parent[h];
}

//부모노드 합치기
void uni(int a,int b){
    if(a>b){
        parent[a] = b;
    }else{
        parent[b] = a;
    }
}

//크루스칼 알고리즘
void kruskal(){
    int node = 0;
    int total = 0;
    for(int i=0;i<graph.size();i++){
        int dist = graph[i].first;
        int x = graph[i].second.first;
        int y = graph[i].second.second;
        
        //사이클이 아닐 경우 부모노드 연결
        px = find(x);
        py = find(y);
        if(px!=py){
            uni(px,py);
            node++;
            total+=dist;
        }
        
        //모두 연결
        if(node==n-1){
            cout<<total;
            return;
        }
    }
    cout<<-1;//연결 실패
}

int main(){
    input();//입력
    kruskal();//크루스칼 알고리즘
    return 0;
}
