#include <iostream>
#include <algorithm>
using namespace std;

int n, k;
int ans = 0;
const int maxi = 51;
string word[maxi];//단어 목록
bool chk_alpha[26];//각 알파벳을 배웠는가?

//입력
void input() {
	cin >> n >> k;
	for (int i = 0; i < n; i++) cin >> word[i];
	//반드시 배워야하는 알파벳
	chk_alpha[0] = true;
	chk_alpha[2] = true;
	chk_alpha[8] = true;
	chk_alpha[13] = true;
	chk_alpha[19] = true;
}
//알파벳 조합
void dfs(int idx, int cnt) {
	//조합 완성
	if (cnt == k) {
		//읽을 수 있는 알파벳 개수 세기
		int read_cnt = 0;
		for (int i = 0; i < n; i++) {
			int cnt = 0;
			for (int j = 4; j < word[i].size() - 4; j++) {
				//아스키 코드 사용
				if (chk_alpha[word[i][j] - 97] == true) cnt++;//배운 알파벳인가?
			}
			if (cnt == word[i].size() - 8) read_cnt++;//모든 알파벳이 배운 알파벳이면 읽을 수 있다. 
		}
		ans = max(read_cnt, ans);
		return;
	}
	//조합구하기
	for (int i = idx; i < 26; i++) {
		if (chk_alpha[i] == false) {//아직 배우지 못한 알파벳만
			chk_alpha[i] = true;//알파벳을 배움
			dfs(i + 1, cnt + 1);//재귀
			chk_alpha[i] = false;//백트래킹
		}
	}
}
int main() {
	//빠른 입력
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	input();//입력
	if (k < 5) cout << ans;//모든 단어를 읽을 수 없음
	else {
		dfs(1, 5);//알파벳 조합구하기(알파벳 인덱스, 배운 단어 개수)
		cout << ans;//출력
	}
	return 0;
}
