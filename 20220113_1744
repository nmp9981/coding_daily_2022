#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
using namespace std;

int n,m;
const int maxi = 1001;
double p_x[maxi];
double p_y[maxi];
vector<pair<double,pair<int,int>>> ufo;
int parent[maxi];

//입력
void input(){
    cin>>n>>m;
    //부모노드 초기화
    for(int i=1;i<=n;i++){
        parent[i] = i;
    }
    //좌표 입력
    for(int i=1;i<=n;i++){
        cin>>p_x[i]>>p_y[i];
    }
    //거리 벡터
    for(int i=1;i<n;i++){
        for(int j=i+1;j<=n;j++){
            double dx = p_x[j]-p_x[i];
            double dy = p_y[j]-p_y[i];
            double dist = sqrt(dx*dx+dy*dy);
            ufo.push_back({dist,{i,j}});
        }
    }
    //이미 연결된 통로는 0으로 연결
    for(int i=0;i<m;i++){
        int a,b;
        cin>>a>>b;
        ufo.push_back({0,{a,b}});
    }
    //거리를 기준으로 정렬
    sort(ufo.begin(),ufo.end());
}

// 각 노드의 부모노드 찾기
int find(int h){
    if(parent[h]==h){
        return h;
    }
    parent[h] = find(parent[h]);
    return parent[h];
}

//크루스칼 알고리즘
void kruskal(){
    double total = 0;
    int node = 0;
    for(int i=0;i<ufo.size();i++){
        int x = ufo[i].second.first;
        int y = ufo[i].second.second;
        double cost = ufo[i].first;
        
        //사이클이 없으면
        int a = find(x);
        int b = find(y);
        if(a!=b){
            parent[b] = a;
            node++;
            total+=cost;
        }
        
        //노드가 모두 만들어지면
        if(node==n-1){
            printf("%.2f",total);
            break;
        }
    }
}
int main(){
    input();//입력
    kruskal();//크루스칼 알고리즘
    return 0;
}
