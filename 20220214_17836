#include <iostream>
#include <cstring>
#include <queue>
#include <algorithm>
using namespace std;

int n,m,t,ans;
const int inf = 1e+8;
const int maxi = 101;
bool visit[maxi][maxi];//방문여부
int castle[maxi][maxi];//성
//다음지점 
int dx[4] = {-1,1,0,0};
int dy[4] = {0,0,-1,1};
 
//입력
void input(){
    cin>>n>>m>>t;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>castle[i][j];
        }
    }
    memset(visit,false,sizeof(visit));//초기화
}
 
//탐색
int save_princess(){
    //첫 지점
    queue<pair<pair<int,int>,int>> q;
    q.push({{1,1},0});
    visit[1][1] = true;
    int sward = inf;

    while(!q.empty()){
        int x = q.front().first.first;
        int y = q.front().first.second;
        int sec = q.front().second;
        q.pop();
        
        //목표도달
        if(x==n && y==m){
            return min(sec,sward);
        }
        //명검
        if(castle[x][y]==2){
            sward = sec+n-x+m-y;
        }
        //다음지점
        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            //범위내에 드는가?
            if(nx<1 || nx>n || ny<1 || ny>m){
                continue;
            }
            //미방문이고 벽이 아니라면
            if(castle[nx][ny]!=1 && visit[nx][ny]==false){
                visit[nx][ny] = true;
                q.push({{nx,ny},sec+1});
            }
        }
    }
    return sward;
}

int main(){
    input();//입력
    ans = save_princess();//공주 구출
    //결과
    if(ans>t){
        cout<<"Fail";
    }else{
        cout<<ans;
    }
    return 0;
}
